basePath: /
consumes:
- application/json
- application/x-www-form-urlencoded
definitions:
  ErrorResponse:
    description: ErrorResponse is a generic error response
    properties:
      error:
        description: The error
        type: string
        x-go-name: Error
    type: object
    x-go-package: github.com/JohnnyS318/RoyalAfgInGo/account/pkg/account/handlers
  UserDTO:
    description: UserDTO is the data transfer object of the internal user object
    properties:
      created_at:
        description: The registration time of the user
        format: date-time
        type: string
        x-go-name: CreatedAt
      email:
        description: The email of the user
        format: email
        maxLength: 100
        minLength: 4
        type: string
        x-go-name: Email
      fullName:
        description: The full name of the user
        maxLength: 100
        minLength: 1
        type: string
        x-go-name: FullName
      id:
        description: The user id
        type: string
        x-go-name: ID
      updated_at:
        description: The time when the user was updated last
        format: date-time
        type: string
        x-go-name: UpdatedAt
      username:
        description: The username of the user
        maxLength: 100
        minLength: 4
        type: string
        x-go-name: Username
    required:
    - id
    - username
    - email
    - fullName
    type: object
    x-go-package: github.com/JohnnyS318/RoyalAfgInGo/account/pkg/account/handlers
  ValidationError:
    description: Each form property that has missing requirements is listet under Errors (validationErrors)
    properties:
      validationErrors:
        description: The missing requirements
        type: object
        x-go-name: Errors
    title: ValidationError shows the failed validation requirements.
    type: object
    x-go-package: github.com/JohnnyS318/RoyalAfgInGo/account/pkg/account/handlers
host: royalafg.games
info:
  contact:
    email: jonas.max.schneider@gmail.com
  description: Documentation for RoyalAfg Auth API
  license:
    name: MIT
    url: http://opensource.org/license/MIT
  title: RoyalAfg Auth API
  version: 0.0.1
paths:
  /account/login:
    post:
      consumes:
      - application/json
      - application/x-www-form-urlencoded
      description: After matching credentials, this will generate a jwt and pass it on as a cookie
      operationId: authentication
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/UserResponse'
        "400":
          $ref: '#/responses/ErrorResponse'
        "401":
          $ref: '#/responses/ErrorResponse'
        "404":
          $ref: '#/responses/ErrorResponse'
        "422":
          $ref: '#/responses/ValidationErrorResponse'
        "500":
          $ref: '#/responses/ErrorResponse'
        default:
          $ref: '#/responses/ErrorResponse'
      schemes:
      - http
      - https
      summary: Login to a user account
  /account/logout:
    post:
      description: This will remove the identity cookie
      operationId: authentication
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/NoContentResponse'
        "401":
          $ref: '#/responses/ErrorResponse'
        default:
          $ref: '#/responses/ErrorResponse'
      schemes:
      - http
      - https
      summary: Logout of account
  /account/register:
    post:
      consumes:
      - application/json
      description: This will register a new user with the provided details
      operationId: authentication
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/UserResponse'
        "400":
          $ref: '#/responses/ErrorResponse'
        "422":
          $ref: '#/responses/ValidationErrorResponse'
        "500":
          $ref: '#/responses/ErrorResponse'
        default:
          $ref: '#/responses/ErrorResponse'
      schemes:
      - http
      - https
      summary: Register a new user
  /account/verify:
    get:
      description: This will return either status code 401 Unauthorized if user is not signed in and 200 when the login token is valid
      operationId: authentication
      produces:
      - application/json
      responses:
        "200":
          $ref: '#/responses/NoContentResponse'
        "401":
          $ref: '#/responses/ErrorResponse'
        default:
          $ref: '#/responses/ErrorResponse'
      schemes:
      - http
      - https
      summary: Verify that the user is logged in
produces:
- application/json
responses:
  ErrorResponse:
    description: ErrorResponse is a generic error response
    schema:
      $ref: '#/definitions/ErrorResponse'
  NoContentResponse:
    description: NoContentResponse is an empty object with no content
  UserResponse:
    description: UserResponse represents a user
    schema:
      $ref: '#/definitions/UserDTO'
  ValidationErrorResponse:
    description: |-
      ValidationError shows the failed validation requirements.
      Each form field that has missing requirements is listet under validationErrors
    schema:
      $ref: '#/definitions/ValidationError'
schemes:
- http
- https
swagger: "2.0"
